Exercises – #1
Writing basic unit tests

Main task
In this exercise, you'll get started with TDD by installing NUnit and writing some simple unit tests.
You'll implement an email address validation application. The method in the class should take an email string as input and return true if the email is valid and in the form of:
name@test.com
The rules are simple. The name, test and com part in the email address above can only contain the characters A-Z.  So the email address can be expressed as   (A-Z)@(A-Z).(A-Z)

    Sample error cases:
    •	Null or empty string
    •	Test.com
    •	name@test
    •	name.test@com
    •	Name2015@test.com
    •	name@test2015.com

    Valid email examples:
    •	mike@edument.se
    •	joe@apple.com

1.	Create a new console project called ValidationEngine in Visual Studio. This is the project that will hold your business code.

2.	Add a class library (.DLL) named ValidationEngineTests to the same solution. This is the project that will hold your unit tests. Delete the auto-generated file (Class1.cs).

3.	Right-click on the newly created test project, and select Manage Nuget Packages from the menu.

4.	From the online tab, search for NUnit and install the package.

5.  Go to Tools -> Extensions and Updates. Install Nunit 3 Test Adapter.

6.	Let your test project reference the console project, so that you will be able to access the code to test.

7.	Create a new class in your test project called ValidationTests. Make sure that the class is public. Annotate it with the [TestFixture] attribute.

8.	Time to add our first test, starting with the simplest case where we send a valid email address to the validation method. Add a void method named TrueForValidAddress. Annotate this method with the [Test] attribute.

9.	 For the Arrange part, do the following steps:
    •	Make an instance of Validator and assign it to a variable called sut.

10.	For the Act part:
    •	Make a call to sut.ValidateEmailAddress(a valid address). 

11.	 For the Assert part:
    •	Assert.IsTrue(returned value)

12.	Your code won't compile at this point - Create stub implementations to begin with. The easiest way to do this is by creating it from the usage in your tests (`Ctrl+.` in Visual Studio)

13.	After stubbing your class, move Validator.cs out of the test project. Amend the namespace and make sure that the class is public.

14.	Run your tests. At this point they should fail.

15.	Go back to your code and implement just enough logic in ValidateEmailAddress to make the test pass. (Hint: Try using regular expressions) Confirm that it does when you are finished.

16.	Next, try and implement a new unit test. This time, add a test for checking what happens when you pass in any of the invalid cases mentioned above. This time make sure to assert on false and make the test pass.

17.	Add some more negative tests. Stretch task

Try to make the  validation method throw custom exceptions instead of just returning false. Assert on those exceptions.
